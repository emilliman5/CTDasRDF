namespaces <- c('cd01p', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/cdiscpilot01-protocol.ttl#>',
'cdiscpilot01', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/cdiscpilot01.ttl#>',
'code', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/code.ttl#>',
'custom', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/custom#>',
'sdtmterm', '<http://rdf.cdisc.org/sdtmterm#>',
'skos', '<http://www.w3.org/2004/02/skos/core#>',
'study', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/study.ttl#>',
'time', '<http://www.w3.org/2006/time#>',
'rdf', '<http://www.w3.org/1999/02/22-rdf-syntax-ns#>',
'rdfs', '<http://www.w3.org/2000/01/rdf-schema#>',
'xsd', '<http://www.w3.org/2001/XMLSchema#>'
)
# Form the queries ----
queryDer = '
SELECT ?s ?p ?o
WHERE
{
cdiscpilot01:Person_v29eedorsh9a5vr65uc1iob3mvn9blbb ?p ?o
BIND ( cdiscpilot01:Person_v29eedorsh9a5vr65uc1iob3mvn9blbb AS ?s)
}'
queryOnt = '
PREFIX cdiscpilot01: <https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/cdiscpilot01.ttl#>
SELECT ?s ?p ?o
WHERE
{
cdiscpilot01:Person_1 ?p ?o .
BIND ("cdiscpilot01:Person_1" AS ?s)
}'
# Query results dfs ----
qrOnt <- SPARQL(url=epOnt, query=queryOnt, ns=namespaces)
triplesOnt <- as.data.frame(qrOnt$results, stringsAsFactors=FALSE)
qrDer <- SPARQL(url=epDer, query=queryDer, ns=namespaces)
triplesDer <- as.data.frame(qrDer$results, stringsAsFactors=FALSE)
###############################################################################
# FILE: CollapsibleTree-Shiny.R
# DESC: Collapsible node tree to compare ontology and derived nodes
# SRC :
# IN  :
# OUT :
# REQ :
# SRC :
# NOTE: Early dev with bogus data
#       Notes on Shiny bindings
#       https://www.rdocumentation.org/packages/collapsibleTree/versions/0.1.5/topics/collapsibleTree-shiny
# TODO:
###############################################################################
library(SPARQL)
library(shiny)
library(collapsibleTree)
library(DT)
# Development data
#org <- data.frame(
#    Manager = c(
#        NA, "Ana", "Ana", "Bill", "Bill", "Bill", "Claudette", "Claudette", "Danny",
#        "Fred", "Fred", "Grace", "Larry", "Larry", "Nicholas", "Nicholas"
#    ),
#    Employee = c(
#        "Ana", "Bill", "Larry", "Claudette", "Danny", "Erika", "Fred", "Grace",
#        "Henri", "Ida", "Joaquin", "Kate", "Mindy", "Nicholas", "Odette", "Peter"
#    ),
#    Title = c(
#        "President", "VP Operations", "VP Finance", "Director", "Director", "Scientist",
#        "Manager", "Manager", "Jr Scientist", "Operator", "Operator", "Associate",
#        "Analyst", "Director", "Accountant", "Accountant"
#    )
#)
test<-"Foo"
# Development data
org <- data.frame(
Manager = c(
"Ana",
"Bill"
),
Employee = c(
"Bill",
"Tom"
),
Title = c(
"VP Operations",
"Janitor"
)
)
rootNode <- data.frame(Manager=NA, Employee="Ana", Title="Pres")
# Append the root node
org <- rbind(rootNode, org)
# -- END OF TEST DATA  ---------------------------------------
epDer = "http://localhost:5820/CTDasRDF/query"
epOnt = "http://localhost:5820/CTDasRDFOnt/query"
# Define the namespaces
namespaces <- c('cd01p', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/cdiscpilot01-protocol.ttl#>',
'cdiscpilot01', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/cdiscpilot01.ttl#>',
'code', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/code.ttl#>',
'custom', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/custom#>',
'sdtmterm', '<http://rdf.cdisc.org/sdtmterm#>',
'skos', '<http://www.w3.org/2004/02/skos/core#>',
'study', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/study.ttl#>',
'time', '<http://www.w3.org/2006/time#>',
'rdf', '<http://www.w3.org/1999/02/22-rdf-syntax-ns#>',
'rdfs', '<http://www.w3.org/2000/01/rdf-schema#>',
'xsd', '<http://www.w3.org/2001/XMLSchema#>'
)
# Form the queries ----
queryDer = '
SELECT ?s ?p ?o
WHERE
{
cdiscpilot01:Person_v29eedorsh9a5vr65uc1iob3mvn9blbb ?p ?o
BIND ( cdiscpilot01:Person_v29eedorsh9a5vr65uc1iob3mvn9blbb AS ?s)
}'
queryOnt = '
PREFIX cdiscpilot01: <https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/cdiscpilot01.ttl#>
SELECT ?s ?p ?o
WHERE
{
cdiscpilot01:Person_1 ?p ?o .
BIND ("cdiscpilot01:Person_1" AS ?s)
}'
# Query results dfs ----
qrOnt <- SPARQL(url=epOnt, query=queryOnt, ns=namespaces)
triplesOnt <- as.data.frame(qrOnt$results, stringsAsFactors=FALSE)
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
###############################################################################
# FILE: CollapsibleTree-Shiny.R
# DESC: Collapsible node tree to compare ontology and derived nodes
# SRC :
# IN  :
# OUT :
# REQ :
# SRC :
# NOTE: Early dev with bogus data
#       Notes on Shiny bindings
#       https://www.rdocumentation.org/packages/collapsibleTree/versions/0.1.5/topics/collapsibleTree-shiny
# TODO:
###############################################################################
library(SPARQL)
library(shiny)
library(collapsibleTree)
library(DT)
# Endpoints
epDer = "http://localhost:5820/CTDasRDF/query"
epOnt = "http://localhost:5820/CTDasRDFOnt/query"
# Define the namespaces
namespaces <- c('cd01p', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/cdiscpilot01-protocol.ttl#>',
'cdiscpilot01', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/cdiscpilot01.ttl#>',
'code', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/code.ttl#>',
'custom', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/custom#>',
'sdtmterm', '<http://rdf.cdisc.org/sdtmterm#>',
'skos', '<http://www.w3.org/2004/02/skos/core#>',
'study', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/study.ttl#>',
'time', '<http://www.w3.org/2006/time#>',
'rdf', '<http://www.w3.org/1999/02/22-rdf-syntax-ns#>',
'rdfs', '<http://www.w3.org/2000/01/rdf-schema#>',
'xsd', '<http://www.w3.org/2001/XMLSchema#>'
)
rootNodeDer <- "Person_v29eedorsh9a5vr65uc1iob3mvn9blbb"
# Form the queries ----
queryDer = paste('
SELECT ?s ?p ?o
WHERE
{
', rootNodeDer,'   ?p ?o
BIND ( ', rootNodeDer, ' AS ?s)
}ORDER BY ?o'
)
queryDer
###############################################################################
# FILE: CollapsibleTree-Shiny.R
# DESC: Collapsible node tree to compare ontology and derived nodes
# SRC :
# IN  :
# OUT :
# REQ :
# SRC :
# NOTE: Early dev with bogus data
#       Notes on Shiny bindings
#       https://www.rdocumentation.org/packages/collapsibleTree/versions/0.1.5/topics/collapsibleTree-shiny
# TODO:
###############################################################################
library(SPARQL)
library(shiny)
library(collapsibleTree)
library(DT)
# Endpoints
epDer = "http://localhost:5820/CTDasRDF/query"
epOnt = "http://localhost:5820/CTDasRDFOnt/query"
# Define the namespaces
namespaces <- c('cd01p', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/cdiscpilot01-protocol.ttl#>',
'cdiscpilot01', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/cdiscpilot01.ttl#>',
'code', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/code.ttl#>',
'custom', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/custom#>',
'sdtmterm', '<http://rdf.cdisc.org/sdtmterm#>',
'skos', '<http://www.w3.org/2004/02/skos/core#>',
'study', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/study.ttl#>',
'time', '<http://www.w3.org/2006/time#>',
'rdf', '<http://www.w3.org/1999/02/22-rdf-syntax-ns#>',
'rdfs', '<http://www.w3.org/2000/01/rdf-schema#>',
'xsd', '<http://www.w3.org/2001/XMLSchema#>'
)
rootNodeDer <- "Person_v29eedorsh9a5vr65uc1iob3mvn9blbb"
# Form the queries ----
queryDer = paste("
SELECT ?s ?p ?o
WHERE
{ ", rootNodeDer,"   ?p ?o
BIND ( ", rootNodeDer, " AS ?s)
}ORDER BY ?o"
)
queryDer
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
###############################################################################
# FILE: CollapsibleTree-Shiny.R
# DESC: Collapsible node tree to compare ontology and derived nodes
# SRC :
# IN  :
# OUT :
# REQ :
# SRC :
# NOTE: Early dev with bogus data
#       Notes on Shiny bindings
#       https://www.rdocumentation.org/packages/collapsibleTree/versions/0.1.5/topics/collapsibleTree-shiny
# TODO:
###############################################################################
library(SPARQL)
library(shiny)
library(collapsibleTree)
library(DT)
# Endpoints
epDer = "http://localhost:5820/CTDasRDF/query"
epOnt = "http://localhost:5820/CTDasRDFOnt/query"
# Define the namespaces
namespaces <- c('cd01p', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/cdiscpilot01-protocol.ttl#>',
'cdiscpilot01', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/cdiscpilot01.ttl#>',
'code', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/code.ttl#>',
'custom', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/custom#>',
'sdtmterm', '<http://rdf.cdisc.org/sdtmterm#>',
'skos', '<http://www.w3.org/2004/02/skos/core#>',
'study', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/study.ttl#>',
'time', '<http://www.w3.org/2006/time#>',
'rdf', '<http://www.w3.org/1999/02/22-rdf-syntax-ns#>',
'rdfs', '<http://www.w3.org/2000/01/rdf-schema#>',
'xsd', '<http://www.w3.org/2001/XMLSchema#>'
)
rootNodeDer <- "Person_v29eedorsh9a5vr65uc1iob3mvn9blbb"
# Form the queries ----
queryDer = paste0("SELECT ?s ?p ?o
WHERE{", rootNodeDer," ?p ?o
BIND(\"", rootNodeDer, "\" AS ?s)
} ORDER BY ?o")
queryDer
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
queryOnt = '
PREFIX cdiscpilot01: <https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/cdiscpilot01.ttl#>
SELECT ?s ?p ?o
WHERE
{
cdiscpilot01:Person_1 ?p ?o .
BIND ("cdiscpilot01:Person_1" AS ?s)
} ORDER BY ?o'
queryOnt
queryDer
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
###############################################################################
# FILE: CollapsibleTree-Shiny.R
# DESC: Collapsible node tree to compare ontology and derived nodes
# SRC :
# IN  :
# OUT :
# REQ :
# SRC :
# NOTE: Early dev with bogus data
#       Notes on Shiny bindings
#       https://www.rdocumentation.org/packages/collapsibleTree/versions/0.1.5/topics/collapsibleTree-shiny
# TODO:
###############################################################################
library(SPARQL)
library(shiny)
library(collapsibleTree)
library(DT)
# Endpoints
epDer = "http://localhost:5820/CTDasRDF/query"
epOnt = "http://localhost:5820/CTDasRDFOnt/query"
# Define the namespaces
namespaces <- c('cd01p', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/cdiscpilot01-protocol.ttl#>',
'cdiscpilot01', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/cdiscpilot01.ttl#>',
'code', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/code.ttl#>',
'custom', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/custom#>',
'sdtmterm', '<http://rdf.cdisc.org/sdtmterm#>',
'skos', '<http://www.w3.org/2004/02/skos/core#>',
'study', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/study.ttl#>',
'time', '<http://www.w3.org/2006/time#>',
'rdf', '<http://www.w3.org/1999/02/22-rdf-syntax-ns#>',
'rdfs', '<http://www.w3.org/2000/01/rdf-schema#>',
'xsd', '<http://www.w3.org/2001/XMLSchema#>'
)
rootNodeDer <- "Person_v29eedorsh9a5vr65uc1iob3mvn9blbb"
# Form the queries ----
queryDer = paste0("
PREFIX cdiscpilot01: <https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/cdiscpilot01.ttl#>
SELECT ?s ?p ?o
WHERE{", rootNodeDer," ?p ?o
BIND(\"",rootNodeDer,"\" AS ?s)
} ORDER BY ?o")
queryDer
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
trace(utils:::unpackPkgZip, edit=TRUE)
install.packages("datapack")
tempdir()
source('~/.active-rstudio-document', echo=TRUE)
View(dp)
View(dp)
head(dp)
head(do)
library(shiny); runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
source('C:/_sandbox/SemanticWeb/UCB/MacroTracker/RBM/data/TTL/Stardog-PathQuery.R', echo=TRUE)
###############################################################################
# FILE: Stardog-PathQuery.R
# DESC: Developing the Stardog path query functionality for later use in
#         RShiny app.
# SRC :
# IN  : triplestore database CTDasRDFOnt
# OUT :
# REQ : Stardog running: 1. on port  5820
#       2. with --disable-security option during start
# SRC :
# NOTE:
# TODO: Adjust code for use in a new version of CollapsibeTree-Shiny.R to use
#       paths instead of SPARQL.
###############################################################################
library(SPARQL)
library(collapsibleTree)
# Query StardogTriple Store ----
endpoint <- "http://localhost:5820/seq/query"
queryOnt = paste0("
PREFIX eg: <http://www.example.org/myproject#>
PATHS START ?s = eg:Thing1
END ?o
VIA ?p
")
qd <- SPARQL(endpoint, queryOnt)
triplesDF <- qd$results
View(triplesDF)
View(triplesDF)
# Post query processing
triplesDF <- triplesDF[complete.cases(triplesDF), ]  # remove blank rows.
triplesDF <- triplesDF[, c("s", "p", "o")]   # remove o.l, s.l
###############################################################################
# FILE: Stardog-PathQuery.R
# DESC: Developing the Stardog path query functionality for later use in
#         RShiny app.
# SRC :
# IN  : triplestore database CTDasRDFOnt
# OUT :
# REQ : Stardog running: 1. on port  5820
#       2. with --disable-security option during start
# SRC :
# NOTE:
# TODO: Adjust code for use in a new version of CollapsibeTree-Shiny.R to use
#       paths instead of SPARQL.
###############################################################################
library(SPARQL)
library(collapsibleTree)
# Query StardogTriple Store ----
endpoint <- "http://localhost:5820/seq/query"
queryOnt = paste0("
PREFIX eg: <http://www.example.org/myproject#>
PATHS START ?s = eg:Thing1
END ?o
VIA ?p
")
qd <- SPARQL(endpoint, queryOnt)
triplesDF <- qd$results
# Post query processing
triplesDF <- triplesDF[complete.cases(triplesDF), ]  # remove blank rows.
triplesDF <- triplesDF[, c("s", "p", "o")]   # remove o.l, s.l
triplesDF <- unique(triplesDF)  # Remove dupes
###############################################################################
# FILE: Stardog-PathQuery.R
# DESC: Developing the Stardog path query functionality for later use in
#         RShiny app.
# SRC :
# IN  : triplestore database CTDasRDFOnt
# OUT :
# REQ : Stardog running: 1. on port  5820
#       2. with --disable-security option during start
# SRC :
# NOTE:
# TODO: Adjust code for use in a new version of CollapsibeTree-Shiny.R to use
#       paths instead of SPARQL.
###############################################################################
library(SPARQL)
library(collapsibleTree)
# Query StardogTriple Store ----
endpoint <- "http://localhost:5820/seq/query"
queryOnt = paste0("
PREFIX eg: <http://www.example.org/myproject#>
PATHS START ?s = eg:Thing1
END ?o
VIA ?p
")
qd <- SPARQL(endpoint, queryOnt)
triplesDF <- qd$results
# Post query processing
triplesDF <- triplesDF[complete.cases(triplesDF), ]  # remove blank rows.
triplesDF <- triplesDF[, c("s", "p", "o")]   # remove o.l, s.l
triplesDF <- unique(triplesDF)  # Remove dupes
source('C:/_sandbox/SemanticWeb/UCB/MacroTracker/RBM/data/TTL/Stardog-PathQuery.R', echo=TRUE)
source('C:/_sandbox/Applications/stardog/SPARQL/Stardog-PathQuery.R', echo=TRUE)
source('C:/_sandbox/Applications/stardog/SPARQL/Stardog-PathQuery.R', echo=TRUE)
source('C:/_sandbox/Applications/stardog/SPARQL/Stardog-PathQuery.R', echo=TRUE)
###############################################################################
# FILE: Stardog-PathQuery.R
# DESC: Developing the Stardog path query functionality for later use in
#         RShiny app.
# SRC :
# IN  : triplestore database CTDasRDFOnt
# OUT :
# REQ : Stardog running: 1. on port  5820
#       2. with --disable-security option during start
# SRC :
# NOTE:
# TODO: Adjust code for use in a new version of CollapsibeTree-Shiny.R to use
#       paths instead of SPARQL.
###############################################################################
library(SPARQL)
library(collapsibleTree)
# Query StardogTriple Store ----
endpoint <- "http://localhost:5820/seq/query"
#queryOnt = paste0("
#  PREFIX eg: <http://www.example.org/myproject#>
#  PATHS START ?s = eg:Thing1
#  END ?o
#  VIA ?p
#")
queryOnt = paste0("
PREFIX eg: <http://www.example.org/myproject#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
paths start ?s = eg:Thing1
end ?o { ?o rdf:type ?oType } via eg:andThen
")
qd <- SPARQL(endpoint, queryOnt)
triplesDF <- qd$results
View(triplesDF)
source('C:/_sandbox/Applications/stardog/SPARQL/Stardog-PathQuery.R', echo=TRUE)
source('C:/_sandbox/Applications/stardog/SPARQL/Stardog-PathQuery.R', echo=TRUE)
source('C:/_sandbox/Applications/stardog/SPARQL/Stardog-PathQuery.R', echo=TRUE)
library(shiny); runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-PathQuery-Shiny.R')
###############################################################################
# FILE : /utility/readXPT.R
# DESCR: Read SAS .XPT file into R Dataframe
# SRC  : /data
# KEYS :
# NOTES:
#
# INPUT:
#      :
# OUT  :
# REQ  :
# TODO :
###############################################################################
library(Hmisc)
# Set working directory to the root of the work area
setwd("C:/_github/CTDasRDF/data/source")
readXPTDomain <- function (domainName){
domainValues <- sasxport.get(paste0(domainName, ".xpt"))
## dataSubset   <- head(domainValues, 300)
}
domainVals <- readXPTDomain("vs")
foo<-as.data.frame(unique(domainVals$visit))
View(foo)
View(foo)
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-PathQuery-Shiny.R')
source('C:/_gitHub/CTDasRDF/r/XPTtoCSV.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/XPTtoCSV.R', echo=TRUE)
install.packages("car")
trace(utils:::unpackPkgZip, edit=TRUE)
install.packages("car")
source('C:/_gitHub/CTDasRDF/r/XPTtoCSV.R', echo=TRUE)
install.packages("car", dependencies=TRUE)
# FILE: XPTtoCSV.R
# DESC: Convert XPT domain file to CSV
# SRC :
# IN  :
# OUT :
# REQ :
# SRC :
# NOTE: Some imputed values to match ontology development requirements.
# TODO:
###############################################################################
library(Hmisc)
library(car)   # recode
install.packages("nloptr")
library(car)
source('C:/_gitHub/CTDasRDF/r/XPTtoCSV.R', echo=TRUE)
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-PathQuery-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-PathQuery-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-PathQuery-Shiny.R')
