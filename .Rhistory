'custom', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/custom#>',
'sdtmterm', '<http://rdf.cdisc.org/sdtmterm#>',
'skos', '<http://www.w3.org/2004/02/skos/core#>',
'study', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/study.ttl#>',
'time', '<http://www.w3.org/2006/time#>',
'rdf', '<http://www.w3.org/1999/02/22-rdf-syntax-ns#>',
'rdfs', '<http://www.w3.org/2000/01/rdf-schema#>',
'xsd', '<http://www.w3.org/2001/XMLSchema#>'
)
rootNodeDer <- "Person_v29eedorsh9a5vr65uc1iob3mvn9blbb"
# Form the queries ----
queryDer = paste0("SELECT ?s ?p ?o
WHERE{", rootNodeDer," ?p ?o
BIND(\"", rootNodeDer, "\" AS ?s)
} ORDER BY ?o")
queryDer
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
queryOnt = '
PREFIX cdiscpilot01: <https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/cdiscpilot01.ttl#>
SELECT ?s ?p ?o
WHERE
{
cdiscpilot01:Person_1 ?p ?o .
BIND ("cdiscpilot01:Person_1" AS ?s)
} ORDER BY ?o'
queryOnt
queryDer
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
###############################################################################
# FILE: CollapsibleTree-Shiny.R
# DESC: Collapsible node tree to compare ontology and derived nodes
# SRC :
# IN  :
# OUT :
# REQ :
# SRC :
# NOTE: Early dev with bogus data
#       Notes on Shiny bindings
#       https://www.rdocumentation.org/packages/collapsibleTree/versions/0.1.5/topics/collapsibleTree-shiny
# TODO:
###############################################################################
library(SPARQL)
library(shiny)
library(collapsibleTree)
library(DT)
# Endpoints
epDer = "http://localhost:5820/CTDasRDF/query"
epOnt = "http://localhost:5820/CTDasRDFOnt/query"
# Define the namespaces
namespaces <- c('cd01p', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/cdiscpilot01-protocol.ttl#>',
'cdiscpilot01', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/cdiscpilot01.ttl#>',
'code', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/code.ttl#>',
'custom', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/custom#>',
'sdtmterm', '<http://rdf.cdisc.org/sdtmterm#>',
'skos', '<http://www.w3.org/2004/02/skos/core#>',
'study', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/study.ttl#>',
'time', '<http://www.w3.org/2006/time#>',
'rdf', '<http://www.w3.org/1999/02/22-rdf-syntax-ns#>',
'rdfs', '<http://www.w3.org/2000/01/rdf-schema#>',
'xsd', '<http://www.w3.org/2001/XMLSchema#>'
)
rootNodeDer <- "Person_v29eedorsh9a5vr65uc1iob3mvn9blbb"
# Form the queries ----
queryDer = paste0("
PREFIX cdiscpilot01: <https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/cdiscpilot01.ttl#>
SELECT ?s ?p ?o
WHERE{", rootNodeDer," ?p ?o
BIND(\"",rootNodeDer,"\" AS ?s)
} ORDER BY ?o")
queryDer
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
trace(utils:::unpackPkgZip, edit=TRUE)
install.packages("datapack")
tempdir()
source('~/.active-rstudio-document', echo=TRUE)
View(dp)
View(dp)
head(dp)
head(do)
library(shiny); runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
source('C:/_sandbox/SemanticWeb/UCB/MacroTracker/RBM/data/TTL/Stardog-PathQuery.R', echo=TRUE)
###############################################################################
# FILE: Stardog-PathQuery.R
# DESC: Developing the Stardog path query functionality for later use in
#         RShiny app.
# SRC :
# IN  : triplestore database CTDasRDFOnt
# OUT :
# REQ : Stardog running: 1. on port  5820
#       2. with --disable-security option during start
# SRC :
# NOTE:
# TODO: Adjust code for use in a new version of CollapsibeTree-Shiny.R to use
#       paths instead of SPARQL.
###############################################################################
library(SPARQL)
library(collapsibleTree)
# Query StardogTriple Store ----
endpoint <- "http://localhost:5820/seq/query"
queryOnt = paste0("
PREFIX eg: <http://www.example.org/myproject#>
PATHS START ?s = eg:Thing1
END ?o
VIA ?p
")
qd <- SPARQL(endpoint, queryOnt)
triplesDF <- qd$results
View(triplesDF)
View(triplesDF)
# Post query processing
triplesDF <- triplesDF[complete.cases(triplesDF), ]  # remove blank rows.
triplesDF <- triplesDF[, c("s", "p", "o")]   # remove o.l, s.l
###############################################################################
# FILE: Stardog-PathQuery.R
# DESC: Developing the Stardog path query functionality for later use in
#         RShiny app.
# SRC :
# IN  : triplestore database CTDasRDFOnt
# OUT :
# REQ : Stardog running: 1. on port  5820
#       2. with --disable-security option during start
# SRC :
# NOTE:
# TODO: Adjust code for use in a new version of CollapsibeTree-Shiny.R to use
#       paths instead of SPARQL.
###############################################################################
library(SPARQL)
library(collapsibleTree)
# Query StardogTriple Store ----
endpoint <- "http://localhost:5820/seq/query"
queryOnt = paste0("
PREFIX eg: <http://www.example.org/myproject#>
PATHS START ?s = eg:Thing1
END ?o
VIA ?p
")
qd <- SPARQL(endpoint, queryOnt)
triplesDF <- qd$results
# Post query processing
triplesDF <- triplesDF[complete.cases(triplesDF), ]  # remove blank rows.
triplesDF <- triplesDF[, c("s", "p", "o")]   # remove o.l, s.l
triplesDF <- unique(triplesDF)  # Remove dupes
###############################################################################
# FILE: Stardog-PathQuery.R
# DESC: Developing the Stardog path query functionality for later use in
#         RShiny app.
# SRC :
# IN  : triplestore database CTDasRDFOnt
# OUT :
# REQ : Stardog running: 1. on port  5820
#       2. with --disable-security option during start
# SRC :
# NOTE:
# TODO: Adjust code for use in a new version of CollapsibeTree-Shiny.R to use
#       paths instead of SPARQL.
###############################################################################
library(SPARQL)
library(collapsibleTree)
# Query StardogTriple Store ----
endpoint <- "http://localhost:5820/seq/query"
queryOnt = paste0("
PREFIX eg: <http://www.example.org/myproject#>
PATHS START ?s = eg:Thing1
END ?o
VIA ?p
")
qd <- SPARQL(endpoint, queryOnt)
triplesDF <- qd$results
# Post query processing
triplesDF <- triplesDF[complete.cases(triplesDF), ]  # remove blank rows.
triplesDF <- triplesDF[, c("s", "p", "o")]   # remove o.l, s.l
triplesDF <- unique(triplesDF)  # Remove dupes
source('C:/_sandbox/SemanticWeb/UCB/MacroTracker/RBM/data/TTL/Stardog-PathQuery.R', echo=TRUE)
source('C:/_sandbox/Applications/stardog/SPARQL/Stardog-PathQuery.R', echo=TRUE)
source('C:/_sandbox/Applications/stardog/SPARQL/Stardog-PathQuery.R', echo=TRUE)
source('C:/_sandbox/Applications/stardog/SPARQL/Stardog-PathQuery.R', echo=TRUE)
###############################################################################
# FILE: Stardog-PathQuery.R
# DESC: Developing the Stardog path query functionality for later use in
#         RShiny app.
# SRC :
# IN  : triplestore database CTDasRDFOnt
# OUT :
# REQ : Stardog running: 1. on port  5820
#       2. with --disable-security option during start
# SRC :
# NOTE:
# TODO: Adjust code for use in a new version of CollapsibeTree-Shiny.R to use
#       paths instead of SPARQL.
###############################################################################
library(SPARQL)
library(collapsibleTree)
# Query StardogTriple Store ----
endpoint <- "http://localhost:5820/seq/query"
#queryOnt = paste0("
#  PREFIX eg: <http://www.example.org/myproject#>
#  PATHS START ?s = eg:Thing1
#  END ?o
#  VIA ?p
#")
queryOnt = paste0("
PREFIX eg: <http://www.example.org/myproject#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
paths start ?s = eg:Thing1
end ?o { ?o rdf:type ?oType } via eg:andThen
")
qd <- SPARQL(endpoint, queryOnt)
triplesDF <- qd$results
View(triplesDF)
source('C:/_sandbox/Applications/stardog/SPARQL/Stardog-PathQuery.R', echo=TRUE)
source('C:/_sandbox/Applications/stardog/SPARQL/Stardog-PathQuery.R', echo=TRUE)
source('C:/_sandbox/Applications/stardog/SPARQL/Stardog-PathQuery.R', echo=TRUE)
library(shiny); runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-PathQuery-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-PathQuery-Shiny.R')
library(shiny); runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-PathQuery-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CompTriples-Stardog-Shiny.R')
install.packages("reshape")
runApp('C:/_gitHub/CTDasRDF/r/validation/CompTriples-Stardog-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CompTriples-Stardog-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CompTriples-Stardog-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CompTriples-Stardog-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CompTriples-Stardog-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CompTriples-Stardog-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CompTriples-Stardog-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CompTriples-Stardog-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CompTriples-Stardog-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CompTriples-Stardog-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CompTriples-Stardog-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CompTriples-Stardog-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CompTriples-Stardog-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CompTriples-Stardog-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CompTriples-Stardog-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CompTriples-Stardog-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CompTriples-Stardog-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CompTriples-Stardog-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CompTriples-Stardog-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CompTriples-Stardog-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CompTriples-Stardog-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CompTriples-Stardog-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CompTriples-Stardog-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CompTriples-Stardog-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CompTriples-Stardog-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CompTriples-Stardog-Shiny.R')
library(shiny); runApp('C:/_gitHub/CTDasRDF/r/validation/CompTriples-Stardog-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CompTriples-Stardog-Shiny.R')
library(shiny); runApp('C:/_gitHub/CTDasRDF/r/validation/CompTriples-Stardog-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CompTriples-Stardog-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CompTriples-Stardog-Shiny.R')
library(utils)
foo <- "https://www.example.org/foobar#2015-4-03T11:10AM"
URLencode(foo)
foo <- "https://www.example.org/foobar#2015-4-03 T11:10AM"
URLencode(foo)
library(devtools)
devtools::install_github('nstrayer/nework3d')
devtools::install_github('nstrayer/network3d')
# SRC :
# IN  :
# OUT :
# REQ :
# NOTE:
# INSTALL:
#   library(devtools)
#   devtools::install_github('nstrayer/network3d')
# TODO:
###############################################################################
library(network3d)
data <- collaboration_networks # comes from the package
View(data)
View(data)
data$edges %>% head() %>% knitr::kable()
library(dplyr)
data$edges %>% head() %>% knitr::kable()
network3d(data$vertices, data$edges)
data$vertices %>% head() %>% knitr::kable()
data$edges %>% head() %>% knitr::kable()
network3d(data$vertices, data$edges)
data$vertices <- data$vertices %>%
mutate(
color = 'steelblue',
name = paste('node', name)
)
network3d(data$vertices, data$edges)
install.packages('htmlwidgets')
install.packages("htmlwidgets")
trace(utils:::unpackPkgZip, edit=TRUE)
install.packages("htmlwidgets")
install.packages("htmlwidgets")
trace(utils:::unpackPkgZip, edit=TRUE)
install.packages("htmlwidgets")
# SRC :
# IN  :
# OUT :
# REQ :
# NOTE:
# INSTALL:
#   library(devtools)
#   devtools::install_github('nstrayer/network3d')
# TODO:
###############################################################################
library(network3d)
library(dplyr)
data <- collaboration_networks # comes from the package
data$vertices %>% head() %>% knitr::kable()
data$edges %>% head() %>% knitr::kable()
# Basic plot.  PROBLEM : No display ?
network3d(data$vertices, data$edges)
library(htmlwidgets)
# Basic plot.  PROBLEM : No display ?
network3d(data$vertices, data$edges)
source('C:/_sandbox/Applications/r/CodeEg/Visualization/3DNetwork/3DNetworkEg.R', echo=TRUE)
getOption(broswer)
getOption("browser")
# Plot 3: Add force explorer
network3d(
data$vertices, data$edges,
node_size = 0.05,
edge_opacity = 0.25,
force_explorer = TRUE)
data$vertices <- data$vertices %>%
mutate(
color =  RColorBrewer::brewer.pal(12, name = 'Paired') %>% sample(size = n(), replace = TRUE),
size = runif(n(), min = 0.01, max = 0.1)
)
network3d(data$vertices, data$edges,
max_iterations = 100,
manybody_strength = 0.5,
background_color = 'black',
edge_opacity = 0.15)
network3d(data$vertices, data$edges,
max_iterations = 100,
manybody_strength = 0.5,
background_color = "#002b36",
edge_opacity = 0.15)
# OUT : View in Google Chrome. Will not show up in RStudio viewer.Set your OS
#       default browser to chrome following instructions:
#         https://support.google.com/chrome/answer/95417?co=GENIE.Platform%3DDesktop&hl=en
# REQ :
# NOTE:  Node size and color set within the dataframe.
# INSTALL: Package is not in CRAN.
#   library(devtools)
#   devtools::install_github('nstrayer/network3d')
# TODO:
###############################################################################
library(network3d)
library(tidyverse)
source('C:/_sandbox/OAA/LinkedData/RBMProgramFlow/r/vis/3DNetworkExampleCode.R', echo=TRUE)
library(shiny); runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-PathQuery-Shiny.R')
source('C:/_gitHub/CTDasRDF/r/XPTtoCSV.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/XPTtoCSV.R', echo=TRUE)
library(plyr)
source('C:/_gitHub/CTDasRDF/r/XPTtoCSV.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/XPTtoCSV.R', echo=TRUE)
# ** Impute ----
# StartRules based on vstpt
vs$startRule_im <- recode (vs$vstpt,
" 'AFTER LYING DOWN FOR 5 MINUTES'  = 'StartRuleLying5' ;
'AFTER STANDING FOR 1 MINUTE'     = 'StartRuleStanding1' ;
'AFTER STANDING FOR 3 MINUTES'    = 'StartRuleStanding3'"
)
# ** Impute ----
# StartRules based on vstpt
vs$startRule_im <-""
vs$startRule_im <- recode (vs$vstpt,
" 'AFTER LYING DOWN FOR 5 MINUTES'  = 'StartRuleLying5' ;
'AFTER STANDING FOR 1 MINUTE'     = 'StartRuleStanding1' ;
'AFTER STANDING FOR 3 MINUTES'    = 'StartRuleStanding3'"
)
vs$startRule_im <- recode(vs$vstpt,
" 'AFTER LYING DOWN FOR 5 MINUTES'  = 'StartRuleLying5' ;
'AFTER STANDING FOR 1 MINUTE'     = 'StartRuleStanding1' ;
'AFTER STANDING FOR 3 MINUTES'    = 'StartRuleStanding3'"
)
?as.factor
vs$startRule_im <- recode(as.factor(vs$vstpt),
" 'AFTER LYING DOWN FOR 5 MINUTES'  = 'StartRuleLying5' ;
'AFTER STANDING FOR 1 MINUTE'     = 'StartRuleStanding1' ;
'AFTER STANDING FOR 3 MINUTES'    = 'StartRuleStanding3'"
)
vs$startRule_im <- recode(as.vector(vs$vstpt),
" 'AFTER LYING DOWN FOR 5 MINUTES'  = 'StartRuleLying5' ;
'AFTER STANDING FOR 1 MINUTE'     = 'StartRuleStanding1' ;
'AFTER STANDING FOR 3 MINUTES'    = 'StartRuleStanding3'"
)
# Subsetting to allow incremental dev
pntSubset<-c('01-701-1015') # List of usubjid's to process.
# Set working directory to the root of the work area
setwd("C:/_github/CTDasRDF")
source('R/Functions.R')  # Functions: readXPT(), encodeCol(), etc.
# VS ----
vs  <- readXPT("vs")  # first row only for initial testing.
# FILE: XPTtoCSV.R
# DESC: Convert XPT domain file to CSV
# SRC :
# IN  :
# OUT :
# REQ :
# SRC :
# NOTE: Some imputed values to match ontology development requirements.
# TODO:
###############################################################################
library(Hmisc)
source('C:/_gitHub/CTDasRDF/r/XPTtoCSV.R', echo=TRUE)
###############################################################################
library(Hmisc)
# library(car)   # recode
# library(plyr)
library(utils)  # for URLencode - no longer used. DELETE
library(dplyr)  # mutate with pipe in Functions.R
# library(RCurl)  # to encode URL values  REMOVED 2018-04-09
dm_n=3;  # The first n patients from the DM domain.
# Subsetting to allow incremental dev
pntSubset<-c('01-701-1015') # List of usubjid's to process.
# Set working directory to the root of the work area
setwd("C:/_github/CTDasRDF")
source('R/Functions.R')  # Functions: readXPT(), encodeCol(), etc.
source('C:/_gitHub/CTDasRDF/r/XPTtoCSV.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/XPTtoCSV.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/XPTtoCSV.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/XPTtoCSV.R', echo=TRUE)
vs$startRule_im <- recode(list(vs$vstpt),
" 'AFTER LYING DOWN FOR 5 MINUTES'  = 'StartRuleLying5' ;
'AFTER STANDING FOR 1 MINUTE'     = 'StartRuleStanding1' ;
'AFTER STANDING FOR 3 MINUTES'    = 'StartRuleStanding3'"
)
?recode
vs$startRule_im <- recode_factor(vs$vstpt,
" 'AFTER LYING DOWN FOR 5 MINUTES'  = 'StartRuleLying5' ;
'AFTER STANDING FOR 1 MINUTE'     = 'StartRuleStanding1' ;
'AFTER STANDING FOR 3 MINUTES'    = 'StartRuleStanding3'"
)
vs$startRule_im <- recode_factor(vs$vstpt,
" 'AFTER LYING DOWN FOR 5 MINUTES'  = 'StartRuleLying5' ;
'AFTER STANDING FOR 1 MINUTE'     = 'StartRuleStanding1' ;
'AFTER STANDING FOR 3 MINUTES'    = 'StartRuleStanding3' "
)
source('C:/_gitHub/CTDasRDF/r/XPTtoCSV.R', echo=TRUE)
###############################################################################
# FILE: XPTtoCSV.R
# DESC: Convert XPT domain file to CSV
# SRC :
# IN  :
# OUT :
# REQ :
# SRC :
# NOTE: Some imputed values to match ontology development requirements.
# TODO:
###############################################################################
library(Hmisc)
library(car)   # recode
# library(plyr)
library(utils)  # for URLencode - no longer used. DELETE
library(dplyr)  # mutate with pipe in Functions.R
# library(RCurl)  # to encode URL values  REMOVED 2018-04-09
dm_n=3;  # The first n patients from the DM domain.
# Subsetting to allow incremental dev
pntSubset<-c('01-701-1015') # List of usubjid's to process.
# Set working directory to the root of the work area
setwd("C:/_github/CTDasRDF")
source('R/Functions.R')  # Functions: readXPT(), encodeCol(), etc.
# ---- Graph Metadata ---------------------------------------------------------
# Read in the source CSV, insert time stamp, and write it back out
#  Source file needed UTF-8 spec to import first column correctly. Could be articfact
#    that needs later replacement.
graphMeta <- read.csv2("data/source/ctdasrdf_graphmeta.csv",
fileEncoding="UTF-8-BOM" , header=TRUE, sep=",");
graphMeta$createdOn<-gsub("(\\d\\d)$", ":\\1",strftime(Sys.time(),"%Y-%m-%dT%H:%M:%S%z"))
write.csv(graphMeta, file="data/source/ctdasrdf_graphmeta.csv",
row.names = F)
# ---- XPT Import -------------------------------------------------------------
# DM ----
dm  <- head(readXPT("dm"), dm_n)
# Impute values needed for testing
source('R/DM_imputeCSV.R')  # Creates birthdate.
write.csv(dm, file="data/source/DM_subset.csv",
row.names = F)
# SUPPDM ----
suppdm  <- readXPT("suppdm")
# subset for development
suppdm <- suppdm[suppdm$usubjid %in% pntSubset,]
write.csv(suppdm, file="data/source/SUPPDM_subset.csv",
row.names = F)
## EX ----
#ex  <- readXPT("ex")
## subset for development
#ex <- ex[ex$usubjid %in% pntSubset,]
## Impute values needed for testing
#source('R/EX_imputeCSV.R')#
##write.csv(ex, file="data/source/EX_subset.csv",
##row.names = F)
# VS ----
vs  <- readXPT("vs")  # first row only for initial testing.
# Subset for development
vs<-vs[vs$visit %in% c("BASELINE","SCREENING 1","WEEK 2","WEEK 24") & vs$usubjid==pntSubset,  ]
# ** Impute ----
# StartRules based on vstpt
vs$startRule_im <- car::recode(vs$vstpt,
" 'AFTER LYING DOWN FOR 5 MINUTES'  = 'StartRuleLying5' ;
'AFTER STANDING FOR 1 MINUTE'     = 'StartRuleStanding1' ;
'AFTER STANDING FOR 3 MINUTES'    = 'StartRuleStanding3' "
)
source('C:/_gitHub/CTDasRDF/r/XPTtoCSV.R', echo=TRUE)
View(graphMeta)
View(graphMeta)
