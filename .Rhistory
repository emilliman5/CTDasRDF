}'
queryOnt = '
SELECT ?s ?p ?o
WHERE
{
cdiscpilot01:Person_1 ?p ?o .
BIND ("cdiscpilot01:Person_1" AS ?s)
}'
# Query results dfs ----
qrOnt <- SPARQL(url=epOnt, query=queryOnt, ns=namespaces)
triplesOnt <- as.data.frame(qrOnt$results, stringsAsFactors=FALSE)
###############################################################################
# FILE: CollapsibleTree-Shiny.R
# DESC: Collapsible node tree to compare ontology and derived nodes
# SRC :
# IN  :
# OUT :
# REQ :
# SRC :
# NOTE: Early dev with bogus data
#       Notes on Shiny bindings
#       https://www.rdocumentation.org/packages/collapsibleTree/versions/0.1.5/topics/collapsibleTree-shiny
# TODO:
###############################################################################
library(SPARQL)
library(shiny)
library(collapsibleTree)
library(DT)
# Development data
#org <- data.frame(
#    Manager = c(
#        NA, "Ana", "Ana", "Bill", "Bill", "Bill", "Claudette", "Claudette", "Danny",
#        "Fred", "Fred", "Grace", "Larry", "Larry", "Nicholas", "Nicholas"
#    ),
#    Employee = c(
#        "Ana", "Bill", "Larry", "Claudette", "Danny", "Erika", "Fred", "Grace",
#        "Henri", "Ida", "Joaquin", "Kate", "Mindy", "Nicholas", "Odette", "Peter"
#    ),
#    Title = c(
#        "President", "VP Operations", "VP Finance", "Director", "Director", "Scientist",
#        "Manager", "Manager", "Jr Scientist", "Operator", "Operator", "Associate",
#        "Analyst", "Director", "Accountant", "Accountant"
#    )
#)
test<-"Foo"
# Development data
org <- data.frame(
Manager = c(
"Ana",
"Bill"
),
Employee = c(
"Bill",
"Tom"
),
Title = c(
"VP Operations",
"Janitor"
)
)
rootNode <- data.frame(Manager=NA, Employee="Ana", Title="Pres")
# Append the root node
org <- rbind(rootNode, org)
# -- END OF TEST DATA  ---------------------------------------
epDer = "http://localhost:5820/CTDasRDF/query"
epOnt = "http://localhost:5820/CTDasRDFOnt/query"
# Define the namespaces
namespaces <- c('cd01p', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/cdiscpilot01-protocol.ttl#>',
'cdiscpilot01', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/cdiscpilot01.ttl#>',
'code', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/code.ttl#>',
'custom', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/custom#>',
'sdtmterm', '<http://rdf.cdisc.org/sdtmterm#>',
'skos', '<http://www.w3.org/2004/02/skos/core#>',
'study', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/study.ttl#>',
'time', '<http://www.w3.org/2006/time#>',
'rdf', '<http://www.w3.org/1999/02/22-rdf-syntax-ns#>',
'rdfs', '<http://www.w3.org/2000/01/rdf-schema#>',
'xsd', '<http://www.w3.org/2001/XMLSchema#>'
)
# Form the queries ----
queryDer = '
SELECT ?s ?p ?o
WHERE
{
cdiscpilot01:Person_v29eedorsh9a5vr65uc1iob3mvn9blbb ?p ?o
BIND ( cdiscpilot01:Person_v29eedorsh9a5vr65uc1iob3mvn9blbb AS ?s)
}'
queryOnt = '
PREFIX cdiscpilot01: <https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/cdiscpilot01.ttl#>
SELECT ?s ?p ?o
WHERE
{
cdiscpilot01:Person_1 ?p ?o .
BIND ("cdiscpilot01:Person_1" AS ?s)
}'
# Query results dfs ----
qrOnt <- SPARQL(url=epOnt, query=queryOnt, ns=namespaces)
triplesOnt <- as.data.frame(qrOnt$results, stringsAsFactors=FALSE)
qrDer <- SPARQL(url=epDer, query=queryDer, ns=namespaces)
triplesDer <- as.data.frame(qrDer$results, stringsAsFactors=FALSE)
###############################################################################
# FILE: CollapsibleTree-Shiny.R
# DESC: Collapsible node tree to compare ontology and derived nodes
# SRC :
# IN  :
# OUT :
# REQ :
# SRC :
# NOTE: Early dev with bogus data
#       Notes on Shiny bindings
#       https://www.rdocumentation.org/packages/collapsibleTree/versions/0.1.5/topics/collapsibleTree-shiny
# TODO:
###############################################################################
library(SPARQL)
library(shiny)
library(collapsibleTree)
library(DT)
# Development data
#org <- data.frame(
#    Manager = c(
#        NA, "Ana", "Ana", "Bill", "Bill", "Bill", "Claudette", "Claudette", "Danny",
#        "Fred", "Fred", "Grace", "Larry", "Larry", "Nicholas", "Nicholas"
#    ),
#    Employee = c(
#        "Ana", "Bill", "Larry", "Claudette", "Danny", "Erika", "Fred", "Grace",
#        "Henri", "Ida", "Joaquin", "Kate", "Mindy", "Nicholas", "Odette", "Peter"
#    ),
#    Title = c(
#        "President", "VP Operations", "VP Finance", "Director", "Director", "Scientist",
#        "Manager", "Manager", "Jr Scientist", "Operator", "Operator", "Associate",
#        "Analyst", "Director", "Accountant", "Accountant"
#    )
#)
test<-"Foo"
# Development data
org <- data.frame(
Manager = c(
"Ana",
"Bill"
),
Employee = c(
"Bill",
"Tom"
),
Title = c(
"VP Operations",
"Janitor"
)
)
rootNode <- data.frame(Manager=NA, Employee="Ana", Title="Pres")
# Append the root node
org <- rbind(rootNode, org)
# -- END OF TEST DATA  ---------------------------------------
epDer = "http://localhost:5820/CTDasRDF/query"
epOnt = "http://localhost:5820/CTDasRDFOnt/query"
# Define the namespaces
namespaces <- c('cd01p', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/cdiscpilot01-protocol.ttl#>',
'cdiscpilot01', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/cdiscpilot01.ttl#>',
'code', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/code.ttl#>',
'custom', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/custom#>',
'sdtmterm', '<http://rdf.cdisc.org/sdtmterm#>',
'skos', '<http://www.w3.org/2004/02/skos/core#>',
'study', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/study.ttl#>',
'time', '<http://www.w3.org/2006/time#>',
'rdf', '<http://www.w3.org/1999/02/22-rdf-syntax-ns#>',
'rdfs', '<http://www.w3.org/2000/01/rdf-schema#>',
'xsd', '<http://www.w3.org/2001/XMLSchema#>'
)
# Form the queries ----
queryDer = '
SELECT ?s ?p ?o
WHERE
{
cdiscpilot01:Person_v29eedorsh9a5vr65uc1iob3mvn9blbb ?p ?o
BIND ( cdiscpilot01:Person_v29eedorsh9a5vr65uc1iob3mvn9blbb AS ?s)
}'
queryOnt = '
PREFIX cdiscpilot01: <https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/cdiscpilot01.ttl#>
SELECT ?s ?p ?o
WHERE
{
cdiscpilot01:Person_1 ?p ?o .
BIND ("cdiscpilot01:Person_1" AS ?s)
}'
# Query results dfs ----
qrOnt <- SPARQL(url=epOnt, query=queryOnt, ns=namespaces)
triplesOnt <- as.data.frame(qrOnt$results, stringsAsFactors=FALSE)
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
###############################################################################
# FILE: CollapsibleTree-Shiny.R
# DESC: Collapsible node tree to compare ontology and derived nodes
# SRC :
# IN  :
# OUT :
# REQ :
# SRC :
# NOTE: Early dev with bogus data
#       Notes on Shiny bindings
#       https://www.rdocumentation.org/packages/collapsibleTree/versions/0.1.5/topics/collapsibleTree-shiny
# TODO:
###############################################################################
library(SPARQL)
library(shiny)
library(collapsibleTree)
library(DT)
# Endpoints
epDer = "http://localhost:5820/CTDasRDF/query"
epOnt = "http://localhost:5820/CTDasRDFOnt/query"
# Define the namespaces
namespaces <- c('cd01p', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/cdiscpilot01-protocol.ttl#>',
'cdiscpilot01', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/cdiscpilot01.ttl#>',
'code', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/code.ttl#>',
'custom', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/custom#>',
'sdtmterm', '<http://rdf.cdisc.org/sdtmterm#>',
'skos', '<http://www.w3.org/2004/02/skos/core#>',
'study', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/study.ttl#>',
'time', '<http://www.w3.org/2006/time#>',
'rdf', '<http://www.w3.org/1999/02/22-rdf-syntax-ns#>',
'rdfs', '<http://www.w3.org/2000/01/rdf-schema#>',
'xsd', '<http://www.w3.org/2001/XMLSchema#>'
)
rootNodeDer <- "Person_v29eedorsh9a5vr65uc1iob3mvn9blbb"
# Form the queries ----
queryDer = paste('
SELECT ?s ?p ?o
WHERE
{
', rootNodeDer,'   ?p ?o
BIND ( ', rootNodeDer, ' AS ?s)
}ORDER BY ?o'
)
queryDer
###############################################################################
# FILE: CollapsibleTree-Shiny.R
# DESC: Collapsible node tree to compare ontology and derived nodes
# SRC :
# IN  :
# OUT :
# REQ :
# SRC :
# NOTE: Early dev with bogus data
#       Notes on Shiny bindings
#       https://www.rdocumentation.org/packages/collapsibleTree/versions/0.1.5/topics/collapsibleTree-shiny
# TODO:
###############################################################################
library(SPARQL)
library(shiny)
library(collapsibleTree)
library(DT)
# Endpoints
epDer = "http://localhost:5820/CTDasRDF/query"
epOnt = "http://localhost:5820/CTDasRDFOnt/query"
# Define the namespaces
namespaces <- c('cd01p', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/cdiscpilot01-protocol.ttl#>',
'cdiscpilot01', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/cdiscpilot01.ttl#>',
'code', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/code.ttl#>',
'custom', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/custom#>',
'sdtmterm', '<http://rdf.cdisc.org/sdtmterm#>',
'skos', '<http://www.w3.org/2004/02/skos/core#>',
'study', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/study.ttl#>',
'time', '<http://www.w3.org/2006/time#>',
'rdf', '<http://www.w3.org/1999/02/22-rdf-syntax-ns#>',
'rdfs', '<http://www.w3.org/2000/01/rdf-schema#>',
'xsd', '<http://www.w3.org/2001/XMLSchema#>'
)
rootNodeDer <- "Person_v29eedorsh9a5vr65uc1iob3mvn9blbb"
# Form the queries ----
queryDer = paste("
SELECT ?s ?p ?o
WHERE
{ ", rootNodeDer,"   ?p ?o
BIND ( ", rootNodeDer, " AS ?s)
}ORDER BY ?o"
)
queryDer
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
###############################################################################
# FILE: CollapsibleTree-Shiny.R
# DESC: Collapsible node tree to compare ontology and derived nodes
# SRC :
# IN  :
# OUT :
# REQ :
# SRC :
# NOTE: Early dev with bogus data
#       Notes on Shiny bindings
#       https://www.rdocumentation.org/packages/collapsibleTree/versions/0.1.5/topics/collapsibleTree-shiny
# TODO:
###############################################################################
library(SPARQL)
library(shiny)
library(collapsibleTree)
library(DT)
# Endpoints
epDer = "http://localhost:5820/CTDasRDF/query"
epOnt = "http://localhost:5820/CTDasRDFOnt/query"
# Define the namespaces
namespaces <- c('cd01p', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/cdiscpilot01-protocol.ttl#>',
'cdiscpilot01', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/cdiscpilot01.ttl#>',
'code', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/code.ttl#>',
'custom', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/custom#>',
'sdtmterm', '<http://rdf.cdisc.org/sdtmterm#>',
'skos', '<http://www.w3.org/2004/02/skos/core#>',
'study', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/study.ttl#>',
'time', '<http://www.w3.org/2006/time#>',
'rdf', '<http://www.w3.org/1999/02/22-rdf-syntax-ns#>',
'rdfs', '<http://www.w3.org/2000/01/rdf-schema#>',
'xsd', '<http://www.w3.org/2001/XMLSchema#>'
)
rootNodeDer <- "Person_v29eedorsh9a5vr65uc1iob3mvn9blbb"
# Form the queries ----
queryDer = paste0("SELECT ?s ?p ?o
WHERE{", rootNodeDer," ?p ?o
BIND(\"", rootNodeDer, "\" AS ?s)
} ORDER BY ?o")
queryDer
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
queryOnt = '
PREFIX cdiscpilot01: <https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/cdiscpilot01.ttl#>
SELECT ?s ?p ?o
WHERE
{
cdiscpilot01:Person_1 ?p ?o .
BIND ("cdiscpilot01:Person_1" AS ?s)
} ORDER BY ?o'
queryOnt
queryDer
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
###############################################################################
# FILE: CollapsibleTree-Shiny.R
# DESC: Collapsible node tree to compare ontology and derived nodes
# SRC :
# IN  :
# OUT :
# REQ :
# SRC :
# NOTE: Early dev with bogus data
#       Notes on Shiny bindings
#       https://www.rdocumentation.org/packages/collapsibleTree/versions/0.1.5/topics/collapsibleTree-shiny
# TODO:
###############################################################################
library(SPARQL)
library(shiny)
library(collapsibleTree)
library(DT)
# Endpoints
epDer = "http://localhost:5820/CTDasRDF/query"
epOnt = "http://localhost:5820/CTDasRDFOnt/query"
# Define the namespaces
namespaces <- c('cd01p', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/cdiscpilot01-protocol.ttl#>',
'cdiscpilot01', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/cdiscpilot01.ttl#>',
'code', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/code.ttl#>',
'custom', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/custom#>',
'sdtmterm', '<http://rdf.cdisc.org/sdtmterm#>',
'skos', '<http://www.w3.org/2004/02/skos/core#>',
'study', '<https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/study.ttl#>',
'time', '<http://www.w3.org/2006/time#>',
'rdf', '<http://www.w3.org/1999/02/22-rdf-syntax-ns#>',
'rdfs', '<http://www.w3.org/2000/01/rdf-schema#>',
'xsd', '<http://www.w3.org/2001/XMLSchema#>'
)
rootNodeDer <- "Person_v29eedorsh9a5vr65uc1iob3mvn9blbb"
# Form the queries ----
queryDer = paste0("
PREFIX cdiscpilot01: <https://raw.githubusercontent.com/phuse-org/CTDasRDF/master/data/rdf/cdiscpilot01.ttl#>
SELECT ?s ?p ?o
WHERE{", rootNodeDer," ?p ?o
BIND(\"",rootNodeDer,"\" AS ?s)
} ORDER BY ?o")
queryDer
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
trace(utils:::unpackPkgZip, edit=TRUE)
install.packages("datapack")
tempdir()
source('~/.active-rstudio-document', echo=TRUE)
View(dp)
View(dp)
head(dp)
head(do)
library(shiny); runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
library(shiny); runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-PathQuery-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-PathQuery-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-PathQuery-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-PathQuery-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-PathQuery-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-PathQuery-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-PathQuery-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-PathQuery-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-PathQuery-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-PathQuery-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-PathQuery-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-PathQuery-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-PathQuery-Shiny.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-PathQuery-Shiny.R')
###############################################################################
# FILE: XPTtoCSV.R
# DESC: Convert XPT domain file to CSV
# SRC :
# IN  :
# OUT :
# REQ :
# SRC :
# NOTE: Some imputed values to match ontology development requirements.
# TODO:
###############################################################################
library(Hmisc)
dm_n=3;  # The first n patients from the DM domain.
# Subsetting to allow incremental dev
pntSubset<-c('01-701-1015') # List of usubjid's to process.
# Set working directory to the root of the work area
setwd("C:/_github/CTDasRDF")
readXPT<-function(domain)
{
sourceFile <- paste0("data/source/", domain, ".XPT")
result <- sasxport.get(sourceFile)
result  # return the dataframe
}
# ---- XPT Import -------------------------------------------------------------
# DM ----
dm  <- head(readXPT("dm"), dm_n)
# Impute values needed for testing
source('R/DM_imputeCSV.R')  # Creates birthdate.
View(dm)
View(dm)
dm$im_lifespan <- paste("LIFESPAN",dm$brthdate, dm$dthdtc)
View(dm)
View(dm)
#______________________________________________________________________________
# FILE: DM_imputeCSV.R
# DESC: Creates data values required for prototyping and ontoloty develeopment
# REQ : Prior import of the DM domain by driver script.
# SRC : N/A
# IN  : dm dataframe
# OUT : modified dm dataframe
# NOTE: Columns that created that are not usually in SDTM are prefixed with im_
#       Eg: im_lifespan  - for lifespan IRI creation
#           im_sdtmterm  - to link to SDTM terminlology
#           brthdate  - no im_ prefix because this is often collected in SDTM.
# TODO:
#______________________________________________________________________________
# ** Impute ----
#---- Birthdate : asbsent in source data
# NOTE: Date calculations based on SECONDS so you must convert the age in Years to seconds
#      Change to character to avoid later ddply problem in DM_process.R
#      Dates reflect their original mixed format of DATE or DATETIME in same col.
dm$brthdate <- as.character(strptime(strptime(dm$rfstdtc, "%Y-%m-%d") - (strtoi(dm$age) * 365.25 * 24 * 60 * 60), "%Y-%m-%d"))
#---- Informed Consent  (column present with missing values in DM source).
dm$rficdtc <- dm$dmdtc   # Confirm this is not in the new Test Data factory version.
# Death Date and Flag set for Person 1 for testing purposes only.
#   Will not match original source data! (no deaths)
# Unfactorize the dthdtc column to allow entry of a bogus date
dm$dthdtc <- as.character(dm$dthdtc)
dm$dthdtc[dm$usubjid == '01-701-1015' ] <- "2013-12-26"  # Death Date
dm$dthfl[dm$usubjid == '01-701-1015' ]  <- "Y" # Set a Death flag  for Person_1
#------------------------------------------------------------------------------
#---- Interval fields to create IRI hashes
#  Start and end dates are concatenated together so missing values do not
#    prevent IRI creation. Example Lifespan with no death date specified.
#    A string must be added to the value so a missing value will not create
#    and IRI that could match another IRI used for an interval that has a
#    different meaning.
dm$im_lifespan <- paste("LIFESPAN",dm$brthdate, dm$dthdtc)
View(dm)
View(dm)
###############################################################################
# FILE: XPTtoCSV.R
# DESC: Convert XPT domain file to CSV
# SRC :
# IN  :
# OUT :
# REQ :
# SRC :
# NOTE: Some imputed values to match ontology development requirements.
# TODO:
###############################################################################
library(Hmisc)
dm_n=3;  # The first n patients from the DM domain.
# Subsetting to allow incremental dev
pntSubset<-c('01-701-1015') # List of usubjid's to process.
# Set working directory to the root of the work area
setwd("C:/_github/CTDasRDF")
readXPT<-function(domain)
{
sourceFile <- paste0("data/source/", domain, ".XPT")
result <- sasxport.get(sourceFile)
result  # return the dataframe
}
# ---- XPT Import -------------------------------------------------------------
# DM ----
dm  <- head(readXPT("dm"), dm_n)
# Impute values needed for testing
source('R/DM_imputeCSV.R')  # Creates birthdate.
write.csv(dm, file="data/source/DM_subset.csv",
row.names = F)
runApp('C:/_gitHub/CTDasRDF/r/validation/CollapsibleTree-PathQuery-Shiny.R')
